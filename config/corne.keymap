/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    behaviors {
        layer_Shifter: layer_Shifter {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_SHIFTER";
            #binding-cells = <0>;
            bindings = <&tog 0>, <&tog 1>, <&tog 3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        Lock {
            bindings = <&win_lock>;
            key-positions = <0 11>;
        };

        Screen_Shot {
            bindings = <&scrnshot>;
            key-positions = <0 5>;
        };

        Copy {
            bindings = <&copy>;
            key-positions = <15 17>;
        };

        Paste {
            bindings = <&paste>;
            key-positions = <29 15>;
        };

        cut {
            bindings = <&cut>;
            key-positions = <5 15>;
        };

        tab-forward {
            bindings = <&tab_ahead>;
            key-positions = <0 2>;
        };

        tab_back {
            bindings = <&tab_back>;
            key-positions = <14 0>;
        };

        tab_close {
            bindings = <&close_tab>;
            key-positions = <12 14>;
        };

        tab_reopen {
            bindings = <&reopen_tab>;
            key-positions = <12 26>;
        };

        crashout_home {
            bindings = <&to 0>;
            key-positions = <24 35>;
        };

        alt-f4 {
            bindings = <&alt_f4>;
            key-positions = <24 5>;
        };
    };

    macros {
        win_lock: win_lock {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(L)>;
            label = "WIN_LOCK";
        };

        scrnshot: scrnshot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LS(S))>;
            label = "SCRNSHOT";
        };

        copy: copy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(C)>;
            label = "COPY";
        };

        paste: paste {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(V)>;
            label = "PASTE";
        };

        cut: cut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(X)>;
            label = "CUT";
        };

        tab_ahead: tab_ahead {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(TAB)>;
            label = "TAB_AHEAD";
        };

        tab_back: tab_back {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(TAB))>;
            label = "TAB_BACK";
        };

        close_tab: close_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(W)>;
            label = "CLOSE_TAB";
        };

        reopen_tab: reopen_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(T))>;
            label = "REOPEN_TAB";
        };

        alt_f4: alt_f4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(F4)>;
            label = "ALT_F4";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Home {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            display-name = "Home";
            bindings = <
&kp ESCAPE  &kp Q  &kp W  &kp E           &kp R  &kp T             &kp Y        &kp U    &kp I           &kp O    &kp P          &kp BSPC
&kp TAB     &kp A  &kp S  &kp D           &kp F  &kp G             &kp H        &kp J    &kp K           &kp L    &kp SEMICOLON  &kp SQT
&kp LSHFT   &kp Z  &kp X  &kp C           &kp V  &kp B             &kp N        &kp M    &kp COMMA       &kp DOT  &kp FSLH       &kp ENTER
                          &layer_Shifter  &mo 1  &kp LEFT_SHIFT    &lt 2 SPACE  &kp DEL  &layer_Shifter
            >;
        };

        Num_Nav {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            display-name = "Num/Nav";
            bindings = <
&to 0   &kp BACKSPACE  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp MINUS    &trans        &trans            &trans  &trans     &trans  &kp BACKSPACE
&trans  &trans         &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp PLUS     &kp LEFT      &kp DOWN          &kp UP  &kp RIGHT  &kp Z   &kp A
&trans  &trans         &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp ENTER    &kp LEFT_GUI  &kp LEFT_CONTROL  &kp X   &kp C      &kp V   &kp RSHFT
                                     &kp PERIOD    &trans        &trans       &trans        &trans            &trans
            >;
        };

        Special_Characters {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            display-name = "Spc Char";
            bindings = <
&trans  &kp EXCL  &kp AT  &kp HASH      &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp BSPC
&trans  &trans    &trans  &trans        &trans    &trans       &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
&trans  &kp F1    &kp F2  &kp F3        &kp F4    &trans       &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                          &kp LEFT_ALT  &to 4     &trans       &trans     &trans     &trans
            >;
        };

        BT_Extra {
            display-name = "BT Config";
            bindings = <
&none       &out OUT_BLE  &out OUT_USB  &none           &none         &none           &none  &none  &none           &none  &none  &none
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2    &bt BT_SEL 3  &bt BT_SEL 4    &none  &none  &none           &none  &none  &none
&none       &none         &none         &none           &none         &none           &none  &none  &none           &none  &none  &none
                                        &layer_Shifter  &none         &none           &none  &none  &layer_Shifter
            >;
        };

        experimantal {
            display-name = "Experimental";
            bindings = <
&kp ESC    &kp Q  &kp W  &kp E         &kp R             &kp T           &kp Y      &kp U    &kp I      &kp O    &kp P     &kp BSPC
&kp TAB    &kp A  &kp S  &kp D         &kp F             &kp G           &kp H      &kp J    &kp K      &kp L    &kp SEMI  &kp APOS
&kp LSHFT  &kp Z  &kp X  &kp C         &kp V             &kp B           &kp N      &kp M    &kp COMMA  &kp DOT  &kp FSLH  &kp ENTER
                         &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_GUI    &kp SPACE  &kp DEL  &to 0
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
